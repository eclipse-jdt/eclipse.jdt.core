/*******************************************************************************
 * Copyright (c) 2000, 2022 IBM Corporation and others.
 *
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
package org.eclipse.jdt.internal.compiler.parser;

/**
 * IMPORTANT NOTE: These constants are dedicated to the internal Scanner implementation.
 * It is mirrored in org.eclipse.jdt.core.compiler public package where it is API.
 * The mirror implementation is using the backward compatible ITerminalSymbols constant
 * definitions (stable with 2.0), whereas the internal implementation uses TerminalTokens
 * which constant values reflect the latest parser generation state.
 */
/**
 * Maps each terminal symbol in the java-grammar into a unique integer.
 * This integer is used to represent the terminal when computing a parsing action.
 *
 * Disclaimer : These constant values are generated automatically using a Java
 * grammar, therefore their actual values are subject to change if new keywords
 * were added to the language (for instance, 'assert' is a keyword in 1.4).
 */
public interface TerminalTokens {

	// special tokens not part of grammar - not autogenerated
	int TokenNameNotAToken = 0,
							TokenNameWHITESPACE = 1000,
							TokenNameCOMMENT_LINE = 1001,
							TokenNameCOMMENT_BLOCK = 1002,
							TokenNameCOMMENT_JAVADOC = 1003,
							TokenNameSingleQuoteStringLiteral = 1004,
							TokenNameCOMMENT_MARKDOWN = 1005;

	static boolean isRestrictedKeyword(int tokenType) {
		return switch (tokenType) {
			case TokenNameRestrictedIdentifierYield, TokenNameRestrictedIdentifierrecord,TokenNameRestrictedIdentifierWhen,
					TokenNameRestrictedIdentifiersealed, TokenNameRestrictedIdentifierpermits -> true;
			default -> false;
		};
	}

	static int getRestrictedKeyword(char [] text) {
		if (text != null) {
			int len = text.length;
			if (len == 4 && text[0] == 'w' ||
				len == 5 && text[0] == 'y' ||
				len == 6 && (text[0] == 'r' || text[0] == 's') ||
				len == 7 && text[0] == 'p') {
				return getRestrictedKeyword(new String(text));
			}
		}
		return TokenNameNotAToken;
	}

	static int getRestrictedKeyword(String text) {
		return switch (text) {
			case "yield"   -> TokenNameRestrictedIdentifierYield;   //$NON-NLS-1$
			case "record"  -> TokenNameRestrictedIdentifierrecord;  //$NON-NLS-1$
			case "when"    -> TokenNameRestrictedIdentifierWhen;    //$NON-NLS-1$
			case "sealed"  -> TokenNameRestrictedIdentifiersealed;  //$NON-NLS-1$
			case "permits" -> TokenNameRestrictedIdentifierpermits; //$NON-NLS-1$
			default        -> TokenNameNotAToken;
		};
	}

	// BEGIN_AUTOGENERATED_REGION
	int TokenNameIdentifier = 24,
							TokenNameabstract = 47,
							TokenNameassert = 83,
							TokenNameboolean = 110,
							TokenNamebreak = 84,
							TokenNamebyte = 111,
							TokenNamecase = 112,
							TokenNamecatch = 113,
							TokenNamechar = 114,
							TokenNameclass = 74,
							TokenNamecontinue = 85,
							TokenNameconst = 145,
							TokenNamedefault = 80,
							TokenNamedo = 86,
							TokenNamedouble = 115,
							TokenNameelse = 127,
							TokenNameenum = 76,
							TokenNameextends = 97,
							TokenNamefalse = 57,
							TokenNamefinal = 48,
							TokenNamefinally = 123,
							TokenNamefloat = 116,
							TokenNamefor = 87,
							TokenNamegoto = 146,
							TokenNameif = 88,
							TokenNameimplements = 142,
							TokenNameimport = 117,
							TokenNameinstanceof = 12,
							TokenNameint = 118,
							TokenNameinterface = 75,
							TokenNamelong = 119,
							TokenNamenative = 49,
							TokenNamenew = 41,
							TokenNamenon_sealed = 50,
							TokenNamenull = 58,
							TokenNamepackage = 96,
							TokenNameprivate = 51,
							TokenNameprotected = 52,
							TokenNamepublic = 53,
							TokenNamereturn = 89,
							TokenNameshort = 120,
							TokenNamestatic = 42,
							TokenNamestrictfp = 54,
							TokenNamesuper = 38,
							TokenNameswitch = 68,
							TokenNamesynchronized = 44,
							TokenNamethis = 39,
							TokenNamethrow = 81,
							TokenNamethrows = 124,
							TokenNametransient = 55,
							TokenNametrue = 59,
							TokenNametry = 90,
							TokenNamevoid = 121,
							TokenNamevolatile = 56,
							TokenNamewhile = 82,
							TokenNamemodule = 122,
							TokenNameopen = 128,
							TokenNamerequires = 129,
							TokenNametransitive = 135,
							TokenNameexports = 130,
							TokenNameopens = 131,
							TokenNameto = 143,
							TokenNameuses = 132,
							TokenNameprovides = 133,
							TokenNamewith = 144,
							TokenNameCASE = 136,
							TokenNameOTHERWISE = 137,
							TokenNameELSE = 134,
							TokenNameIF = 91,
							TokenNameSWITCH = 92,
							TokenNameIntegerLiteral = 60,
							TokenNameLongLiteral = 61,
							TokenNameFloatingPointLiteral = 62,
							TokenNameDoubleLiteral = 63,
							TokenNameCharacterLiteral = 64,
							TokenNameStringLiteral = 65,
							TokenNameTextBlock = 66,
							TokenNamePLUS_PLUS = 2,
							TokenNameMINUS_MINUS = 3,
							TokenNameEQUAL_EQUAL = 19,
							TokenNameEQUAL_EQUAL_EQUAL = 20,
							TokenNameLESS_EQUAL = 13,
							TokenNameGREATER_EQUAL = 14,
							TokenNameNOT_EQUAL = 21,
							TokenNameNOT_EQUAL_EQUAL = 22,
							TokenNameLEFT_SHIFT = 18,
							TokenNameRIGHT_SHIFT = 15,
							TokenNameUNSIGNED_RIGHT_SHIFT = 17,
							TokenNamePLUS_EQUAL = 98,
							TokenNameMINUS_EQUAL = 99,
							TokenNameMULTIPLY_EQUAL = 100,
							TokenNameDIVIDE_EQUAL = 101,
							TokenNameAND_EQUAL = 102,
							TokenNameOR_EQUAL = 103,
							TokenNameXOR_EQUAL = 104,
							TokenNameREMAINDER_EQUAL = 105,
							TokenNameLEFT_SHIFT_EQUAL = 106,
							TokenNameRIGHT_SHIFT_EQUAL = 107,
							TokenNameUNSIGNED_RIGHT_SHIFT_EQUAL = 108,
							TokenNameCONNECT = 109,
							TokenNameOR_OR = 34,
							TokenNameAND_AND = 33,
							TokenNamePLUS = 4,
							TokenNameMINUS = 5,
							TokenNameNOT = 70,
							TokenNameREMAINDER = 10,
							TokenNameXOR = 26,
							TokenNameAND = 23,
							TokenNameMULTIPLY = 6,
							TokenNameOR = 28,
							TokenNameTWIDDLE = 71,
							TokenNameDIVIDE = 11,
							TokenNameGREATER = 16,
							TokenNameLESS = 7,
							TokenNameLPAREN = 25,
							TokenNameRPAREN = 27,
							TokenNameLBRACE = 43,
							TokenNameRBRACE = 36,
							TokenNameLBRACKET = 8,
							TokenNameRBRACKET = 72,
							TokenNameSEMICOLON = 29,
							TokenNameQUESTION = 32,
							TokenNameCOLON = 69,
							TokenNameCOMMA = 35,
							TokenNameDOT = 1,
							TokenNameEQUAL = 93,
							TokenNameAT = 40,
							TokenNameELLIPSIS = 125,
							TokenNameHASH = 31,
							TokenNameARROW = 126,
							TokenNameCOLON_COLON = 9,
							TokenNameBeginLambda = 67,
							TokenNameBeginIntersectionCast = 73,
							TokenNameBeginTypeArguments = 95,
							TokenNameElidedSemicolonAndRightBrace = 77,
							TokenNameAT308 = 30,
							TokenNameAT308DOTDOTDOT = 138,
							TokenNameCaseArrow = 78,
							TokenNameRestrictedIdentifierYield = 94,
							TokenNameRestrictedIdentifierrecord = 79,
							TokenNameRestrictedIdentifiersealed = 45,
							TokenNameRestrictedIdentifierpermits = 139,
							TokenNameBeginCasePattern = 140,
							TokenNameRestrictedIdentifierWhen = 141,
							TokenNameUNDERSCORE = 37,
							TokenNameEOF = 46,
							TokenNameERROR = 147;
}
