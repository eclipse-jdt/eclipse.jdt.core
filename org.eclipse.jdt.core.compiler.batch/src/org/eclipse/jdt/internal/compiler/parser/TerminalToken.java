/*******************************************************************************
 * Copyright (c) 2000, 2025 IBM Corporation and others.
 *
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * This is an implementation of an early-draft specification developed under the Java
 * Community Process (JCP) and is made available for testing and evaluation purposes
 * only. The code is not compatible with any specification of the JCP.
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
package org.eclipse.jdt.internal.compiler.parser;

import java.util.HashMap;
import java.util.Map;

/**
 * IMPORTANT NOTE: These constants are dedicated to the internal Scanner implementation.
 * It is mirrored in org.eclipse.jdt.core.compiler public package where it is API.
 * The mirror implementation is using the backward compatible ITerminalSymbols constant
 * definitions (stable with 2.0), whereas the internal implementation uses TerminalTokens
 * which constant values reflect the latest parser generation state.
 */
/**
 * Maps each terminal symbol in the java-grammar into a unique integer.
 * This integer is used to represent the terminal when computing a parsing action.
 *
 * Disclaimer : These constant values are generated automatically using a Java
 * grammar, therefore their actual values are subject to change if new keywords
 * were added to the language (for instance, 'assert' is a keyword in 1.4).
 */
public enum TerminalToken {

	// special tokens not part of grammar - not autogenerated
							TokenNameInvalid(-1),
							TokenNameNotAToken(0),
							TokenNameWHITESPACE(1000),
							TokenNameCOMMENT_LINE(1001),
							TokenNameCOMMENT_BLOCK(1002),
							TokenNameCOMMENT_JAVADOC(1003),
							TokenNameSingleQuoteStringLiteral(1004),
							TokenNameCOMMENT_MARKDOWN(1005),

	// BEGIN_AUTOGENERATED_REGION
							TokenNameIdentifier(22),
							TokenNameabstract(44),
							TokenNameassert(82),
							TokenNameboolean(105),
							TokenNamebreak(83),
							TokenNamebyte(106),
							TokenNamecase(107),
							TokenNamecatch(108),
							TokenNamechar(109),
							TokenNameclass(72),
							TokenNamecontinue(84),
							TokenNameconst(137),
							TokenNamedefault(78),
							TokenNamedo(85),
							TokenNamedouble(110),
							TokenNameelse(120),
							TokenNameenum(76),
							TokenNameextends(93),
							TokenNamefalse(54),
							TokenNamefinal(45),
							TokenNamefinally(118),
							TokenNamefloat(111),
							TokenNamefor(86),
							TokenNamegoto(138),
							TokenNameif(87),
							TokenNameimplements(133),
							TokenNameimport(112),
							TokenNameinstanceof(17),
							TokenNameint(113),
							TokenNameinterface(73),
							TokenNamelong(114),
							TokenNamenative(46),
							TokenNamenew(38),
							TokenNamenon_sealed(47),
							TokenNamenull(55),
							TokenNamepackage(92),
							TokenNameprivate(48),
							TokenNameprotected(49),
							TokenNamepublic(50),
							TokenNamereturn(88),
							TokenNameshort(115),
							TokenNamestatic(40),
							TokenNamestrictfp(51),
							TokenNamesuper(35),
							TokenNameswitch(66),
							TokenNamesynchronized(41),
							TokenNamethis(36),
							TokenNamethrow(80),
							TokenNamethrows(121),
							TokenNametransient(52),
							TokenNametrue(56),
							TokenNametry(89),
							TokenNamevoid(116),
							TokenNamevolatile(53),
							TokenNamewhile(81),
							TokenNamemodule(117),
							TokenNameopen(122),
							TokenNamerequires(123),
							TokenNametransitive(128),
							TokenNameexports(124),
							TokenNameopens(125),
							TokenNameto(134),
							TokenNameuses(126),
							TokenNameprovides(127),
							TokenNamewith(135),
							TokenNameIntegerLiteral(57),
							TokenNameLongLiteral(58),
							TokenNameFloatingPointLiteral(59),
							TokenNameDoubleLiteral(60),
							TokenNameCharacterLiteral(61),
							TokenNameStringLiteral(62),
							TokenNameTextBlock(63),
							TokenNamePLUS_PLUS(2),
							TokenNameMINUS_MINUS(3),
							TokenNameEQUAL_EQUAL(19),
							TokenNameLESS_EQUAL(12),
							TokenNameGREATER_EQUAL(13),
							TokenNameNOT_EQUAL(20),
							TokenNameLEFT_SHIFT(18),
							TokenNameRIGHT_SHIFT(14),
							TokenNameUNSIGNED_RIGHT_SHIFT(16),
							TokenNamePLUS_EQUAL(94),
							TokenNameMINUS_EQUAL(95),
							TokenNameMULTIPLY_EQUAL(96),
							TokenNameDIVIDE_EQUAL(97),
							TokenNameAND_EQUAL(98),
							TokenNameOR_EQUAL(99),
							TokenNameXOR_EQUAL(100),
							TokenNameREMAINDER_EQUAL(101),
							TokenNameLEFT_SHIFT_EQUAL(102),
							TokenNameRIGHT_SHIFT_EQUAL(103),
							TokenNameUNSIGNED_RIGHT_SHIFT_EQUAL(104),
							TokenNameOR_OR(31),
							TokenNameAND_AND(30),
							TokenNamePLUS(4),
							TokenNameMINUS(5),
							TokenNameNOT(68),
							TokenNameREMAINDER(9),
							TokenNameXOR(25),
							TokenNameAND(21),
							TokenNameMULTIPLY(8),
							TokenNameOR(28),
							TokenNameTWIDDLE(69),
							TokenNameDIVIDE(10),
							TokenNameGREATER(15),
							TokenNameLESS(11),
							TokenNameLPAREN(23),
							TokenNameRPAREN(24),
							TokenNameLBRACE(64),
							TokenNameRBRACE(33),
							TokenNameLBRACKET(6),
							TokenNameRBRACKET(71),
							TokenNameSEMICOLON(26),
							TokenNameQUESTION(29),
							TokenNameCOLON(67),
							TokenNameCOMMA(32),
							TokenNameDOT(1),
							TokenNameEQUAL(79),
							TokenNameAT(37),
							TokenNameELLIPSIS(129),
							TokenNameARROW(119),
							TokenNameCOLON_COLON(7),
							TokenNameBeginLambda(65),
							TokenNameBeginIntersectionCast(70),
							TokenNameBeginTypeArguments(90),
							TokenNameElidedSemicolonAndRightBrace(74),
							TokenNameAT308(27),
							TokenNameAT308DOTDOTDOT(136),
							TokenNameCaseArrow(75),
							TokenNameRestrictedIdentifierYield(91),
							TokenNameRestrictedIdentifierrecord(77),
							TokenNameRestrictedIdentifiersealed(42),
							TokenNameRestrictedIdentifierpermits(130),
							TokenNameBeginCasePattern(131),
							TokenNameRestrictedIdentifierWhen(132),
							TokenNameUNDERSCORE(34),
							TokenNameRestrictedIdentifiervalue(43),
							TokenNameEOF(39),
							TokenNameERROR(139);

// END_AUTOGENERATED_REGION

	private final static Map<Integer, TerminalToken> tokenMap = new HashMap<>(256);
	static {
		for (TerminalToken t : TerminalToken.values()) {
			tokenMap.put(t.tokenNumber(), t);
		}
	}

	private final int tokenNumber;

	// Constructor
	TerminalToken(int number) {
		this.tokenNumber = number;
	}

	public int tokenNumber() {
		return this.tokenNumber;
	}

	public static boolean isRestrictedKeyword(TerminalToken tokenType) {
		return switch (tokenType) {
			case TokenNameRestrictedIdentifierYield, TokenNameRestrictedIdentifierrecord, TokenNameRestrictedIdentifierWhen,
					TokenNameRestrictedIdentifiersealed, TokenNameRestrictedIdentifierpermits,
					TokenNameRestrictedIdentifiervalue -> true;
			default -> false;
		};
	}

	public static TerminalToken getRestrictedKeyword(char [] text) {
		if (text != null) {
			int len = text.length;
			if (len == 4 && text[0] == 'w' ||
				len == 5 && text[0] == 'y' ||
				len == 6 && (text[0] == 'r' || text[0] == 's') ||
				len == 7 && text[0] == 'p') {
				return getRestrictedKeyword(new String(text));
			}
		}
		return TokenNameNotAToken;
	}

	public static TerminalToken getRestrictedKeyword(String text) {
		return switch (text) {
			case "yield"   -> TokenNameRestrictedIdentifierYield;   //$NON-NLS-1$
			case "record"  -> TokenNameRestrictedIdentifierrecord;  //$NON-NLS-1$
			case "when"    -> TokenNameRestrictedIdentifierWhen;    //$NON-NLS-1$
			case "sealed"  -> TokenNameRestrictedIdentifiersealed;  //$NON-NLS-1$
			case "permits" -> TokenNameRestrictedIdentifierpermits; //$NON-NLS-1$
			case "value"  -> TokenNameRestrictedIdentifiervalue;  //$NON-NLS-1$
			default        -> TokenNameNotAToken;
		};
	}

	public static TerminalToken of(int act) {
		TerminalToken token = tokenMap.get(act);
		if (token == null) {
			// Really shouldn't occur -- perhaps if parser non-terminals are looked up?
			throw new IllegalArgumentException("Unknown token number = " + act); //$NON-NLS-1$
		}
		return token;
	}

	static TerminalToken maybeOf(int act) {
		return tokenMap.get(act);
	}

}

